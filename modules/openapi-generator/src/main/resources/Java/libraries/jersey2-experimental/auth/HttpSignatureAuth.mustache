{{>licenseInfo}}
  
package {{invokerPackage}}.auth;

import {{invokerPackage}}.Pair;
import {{invokerPackage}}.ApiException;

import java.io.ByteArrayInputStream;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import org.tomitribe.auth.signatures.*;

public class HttpSignatureAuth implements Authentication {

  private PrivateKey privateKey;

  private Signer signer;

  private Algorithm algorithm;

  private String name;

  public HttpSignatureAuth(String name) {
    this.name = name;
  }

  public void setup(PrivateKey privateKey, Algorithm algorithm, String... sign) throws ApiException {
    if (algorithm == null) {
      this.algorithm = Algorithm.RSA_SHA512; // default using RSA-SHA512
    } else {
      this.algorithm = algorithm;
    }

    if (privateKey == null) {
      throw new ApiException("privateKey (java.security.PrivateKey) cannot be null");
    } else {
      this.privateKey = privateKey;
    }

    signer = new Signer(this.privateKey, new Signature(this.name, this.algorithm, null, sign));
  }

  public Signer getSigner() {
    return signer;
  }

  @Override
  public void applyToParams(List<Pair> queryParams, Map<String, String> headerParams, Map<String, String> cookieParams, String method, String uri) throws ApiException {
    if (signer == null) {
      throw new ApiException("Signer cannot be null. Please run the method `setup` to set it up correctly");
    }

    try {
      headerParams.put("Authorization", signer.sign(method, uri, headerParams).toString());
    } catch (Exception ex) {
      throw new ApiException("Failed to create signature in the HTTP request header: " + ex.toString());
    }
  }
}

